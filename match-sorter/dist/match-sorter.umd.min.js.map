{"version":3,"file":"match-sorter.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/remove-accents/index.js","../src/index.js"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","var characterMap = {\r\n\t\"À\": \"A\",\r\n\t\"Á\": \"A\",\r\n\t\"Â\": \"A\",\r\n\t\"Ã\": \"A\",\r\n\t\"Ä\": \"A\",\r\n\t\"Å\": \"A\",\r\n\t\"Ấ\": \"A\",\r\n\t\"Ắ\": \"A\",\r\n\t\"Ẳ\": \"A\",\r\n\t\"Ẵ\": \"A\",\r\n\t\"Ặ\": \"A\",\r\n\t\"Æ\": \"AE\",\r\n\t\"Ầ\": \"A\",\r\n\t\"Ằ\": \"A\",\r\n\t\"Ȃ\": \"A\",\r\n\t\"Ç\": \"C\",\r\n\t\"Ḉ\": \"C\",\r\n\t\"È\": \"E\",\r\n\t\"É\": \"E\",\r\n\t\"Ê\": \"E\",\r\n\t\"Ë\": \"E\",\r\n\t\"Ế\": \"E\",\r\n\t\"Ḗ\": \"E\",\r\n\t\"Ề\": \"E\",\r\n\t\"Ḕ\": \"E\",\r\n\t\"Ḝ\": \"E\",\r\n\t\"Ȇ\": \"E\",\r\n\t\"Ì\": \"I\",\r\n\t\"Í\": \"I\",\r\n\t\"Î\": \"I\",\r\n\t\"Ï\": \"I\",\r\n\t\"Ḯ\": \"I\",\r\n\t\"Ȋ\": \"I\",\r\n\t\"Ð\": \"D\",\r\n\t\"Ñ\": \"N\",\r\n\t\"Ò\": \"O\",\r\n\t\"Ó\": \"O\",\r\n\t\"Ô\": \"O\",\r\n\t\"Õ\": \"O\",\r\n\t\"Ö\": \"O\",\r\n\t\"Ø\": \"O\",\r\n\t\"Ố\": \"O\",\r\n\t\"Ṍ\": \"O\",\r\n\t\"Ṓ\": \"O\",\r\n\t\"Ȏ\": \"O\",\r\n\t\"Ù\": \"U\",\r\n\t\"Ú\": \"U\",\r\n\t\"Û\": \"U\",\r\n\t\"Ü\": \"U\",\r\n\t\"Ý\": \"Y\",\r\n\t\"à\": \"a\",\r\n\t\"á\": \"a\",\r\n\t\"â\": \"a\",\r\n\t\"ã\": \"a\",\r\n\t\"ä\": \"a\",\r\n\t\"å\": \"a\",\r\n\t\"ấ\": \"a\",\r\n\t\"ắ\": \"a\",\r\n\t\"ẳ\": \"a\",\r\n\t\"ẵ\": \"a\",\r\n\t\"ặ\": \"a\",\r\n\t\"æ\": \"ae\",\r\n\t\"ầ\": \"a\",\r\n\t\"ằ\": \"a\",\r\n\t\"ȃ\": \"a\",\r\n\t\"ç\": \"c\",\r\n\t\"ḉ\": \"c\",\r\n\t\"è\": \"e\",\r\n\t\"é\": \"e\",\r\n\t\"ê\": \"e\",\r\n\t\"ë\": \"e\",\r\n\t\"ế\": \"e\",\r\n\t\"ḗ\": \"e\",\r\n\t\"ề\": \"e\",\r\n\t\"ḕ\": \"e\",\r\n\t\"ḝ\": \"e\",\r\n\t\"ȇ\": \"e\",\r\n\t\"ì\": \"i\",\r\n\t\"í\": \"i\",\r\n\t\"î\": \"i\",\r\n\t\"ï\": \"i\",\r\n\t\"ḯ\": \"i\",\r\n\t\"ȋ\": \"i\",\r\n\t\"ð\": \"d\",\r\n\t\"ñ\": \"n\",\r\n\t\"ò\": \"o\",\r\n\t\"ó\": \"o\",\r\n\t\"ô\": \"o\",\r\n\t\"õ\": \"o\",\r\n\t\"ö\": \"o\",\r\n\t\"ø\": \"o\",\r\n\t\"ố\": \"o\",\r\n\t\"ṍ\": \"o\",\r\n\t\"ṓ\": \"o\",\r\n\t\"ȏ\": \"o\",\r\n\t\"ù\": \"u\",\r\n\t\"ú\": \"u\",\r\n\t\"û\": \"u\",\r\n\t\"ü\": \"u\",\r\n\t\"ý\": \"y\",\r\n\t\"ÿ\": \"y\",\r\n\t\"Ā\": \"A\",\r\n\t\"ā\": \"a\",\r\n\t\"Ă\": \"A\",\r\n\t\"ă\": \"a\",\r\n\t\"Ą\": \"A\",\r\n\t\"ą\": \"a\",\r\n\t\"Ć\": \"C\",\r\n\t\"ć\": \"c\",\r\n\t\"Ĉ\": \"C\",\r\n\t\"ĉ\": \"c\",\r\n\t\"Ċ\": \"C\",\r\n\t\"ċ\": \"c\",\r\n\t\"Č\": \"C\",\r\n\t\"č\": \"c\",\r\n\t\"C̆\": \"C\",\r\n\t\"c̆\": \"c\",\r\n\t\"Ď\": \"D\",\r\n\t\"ď\": \"d\",\r\n\t\"Đ\": \"D\",\r\n\t\"đ\": \"d\",\r\n\t\"Ē\": \"E\",\r\n\t\"ē\": \"e\",\r\n\t\"Ĕ\": \"E\",\r\n\t\"ĕ\": \"e\",\r\n\t\"Ė\": \"E\",\r\n\t\"ė\": \"e\",\r\n\t\"Ę\": \"E\",\r\n\t\"ę\": \"e\",\r\n\t\"Ě\": \"E\",\r\n\t\"ě\": \"e\",\r\n\t\"Ĝ\": \"G\",\r\n\t\"Ǵ\": \"G\",\r\n\t\"ĝ\": \"g\",\r\n\t\"ǵ\": \"g\",\r\n\t\"Ğ\": \"G\",\r\n\t\"ğ\": \"g\",\r\n\t\"Ġ\": \"G\",\r\n\t\"ġ\": \"g\",\r\n\t\"Ģ\": \"G\",\r\n\t\"ģ\": \"g\",\r\n\t\"Ĥ\": \"H\",\r\n\t\"ĥ\": \"h\",\r\n\t\"Ħ\": \"H\",\r\n\t\"ħ\": \"h\",\r\n\t\"Ḫ\": \"H\",\r\n\t\"ḫ\": \"h\",\r\n\t\"Ĩ\": \"I\",\r\n\t\"ĩ\": \"i\",\r\n\t\"Ī\": \"I\",\r\n\t\"ī\": \"i\",\r\n\t\"Ĭ\": \"I\",\r\n\t\"ĭ\": \"i\",\r\n\t\"Į\": \"I\",\r\n\t\"į\": \"i\",\r\n\t\"İ\": \"I\",\r\n\t\"ı\": \"i\",\r\n\t\"Ĳ\": \"IJ\",\r\n\t\"ĳ\": \"ij\",\r\n\t\"Ĵ\": \"J\",\r\n\t\"ĵ\": \"j\",\r\n\t\"Ķ\": \"K\",\r\n\t\"ķ\": \"k\",\r\n\t\"Ḱ\": \"K\",\r\n\t\"ḱ\": \"k\",\r\n\t\"K̆\": \"K\",\r\n\t\"k̆\": \"k\",\r\n\t\"Ĺ\": \"L\",\r\n\t\"ĺ\": \"l\",\r\n\t\"Ļ\": \"L\",\r\n\t\"ļ\": \"l\",\r\n\t\"Ľ\": \"L\",\r\n\t\"ľ\": \"l\",\r\n\t\"Ŀ\": \"L\",\r\n\t\"ŀ\": \"l\",\r\n\t\"Ł\": \"l\",\r\n\t\"ł\": \"l\",\r\n\t\"Ḿ\": \"M\",\r\n\t\"ḿ\": \"m\",\r\n\t\"M̆\": \"M\",\r\n\t\"m̆\": \"m\",\r\n\t\"Ń\": \"N\",\r\n\t\"ń\": \"n\",\r\n\t\"Ņ\": \"N\",\r\n\t\"ņ\": \"n\",\r\n\t\"Ň\": \"N\",\r\n\t\"ň\": \"n\",\r\n\t\"ŉ\": \"n\",\r\n\t\"N̆\": \"N\",\r\n\t\"n̆\": \"n\",\r\n\t\"Ō\": \"O\",\r\n\t\"ō\": \"o\",\r\n\t\"Ŏ\": \"O\",\r\n\t\"ŏ\": \"o\",\r\n\t\"Ő\": \"O\",\r\n\t\"ő\": \"o\",\r\n\t\"Œ\": \"OE\",\r\n\t\"œ\": \"oe\",\r\n\t\"P̆\": \"P\",\r\n\t\"p̆\": \"p\",\r\n\t\"Ŕ\": \"R\",\r\n\t\"ŕ\": \"r\",\r\n\t\"Ŗ\": \"R\",\r\n\t\"ŗ\": \"r\",\r\n\t\"Ř\": \"R\",\r\n\t\"ř\": \"r\",\r\n\t\"R̆\": \"R\",\r\n\t\"r̆\": \"r\",\r\n\t\"Ȓ\": \"R\",\r\n\t\"ȓ\": \"r\",\r\n\t\"Ś\": \"S\",\r\n\t\"ś\": \"s\",\r\n\t\"Ŝ\": \"S\",\r\n\t\"ŝ\": \"s\",\r\n\t\"Ş\": \"S\",\r\n\t\"Ș\": \"S\",\r\n\t\"ș\": \"s\",\r\n\t\"ş\": \"s\",\r\n\t\"Š\": \"S\",\r\n\t\"š\": \"s\",\r\n\t\"Ţ\": \"T\",\r\n\t\"ţ\": \"t\",\r\n\t\"ț\": \"t\",\r\n\t\"Ț\": \"T\",\r\n\t\"Ť\": \"T\",\r\n\t\"ť\": \"t\",\r\n\t\"Ŧ\": \"T\",\r\n\t\"ŧ\": \"t\",\r\n\t\"T̆\": \"T\",\r\n\t\"t̆\": \"t\",\r\n\t\"Ũ\": \"U\",\r\n\t\"ũ\": \"u\",\r\n\t\"Ū\": \"U\",\r\n\t\"ū\": \"u\",\r\n\t\"Ŭ\": \"U\",\r\n\t\"ŭ\": \"u\",\r\n\t\"Ů\": \"U\",\r\n\t\"ů\": \"u\",\r\n\t\"Ű\": \"U\",\r\n\t\"ű\": \"u\",\r\n\t\"Ų\": \"U\",\r\n\t\"ų\": \"u\",\r\n\t\"Ȗ\": \"U\",\r\n\t\"ȗ\": \"u\",\r\n\t\"V̆\": \"V\",\r\n\t\"v̆\": \"v\",\r\n\t\"Ŵ\": \"W\",\r\n\t\"ŵ\": \"w\",\r\n\t\"Ẃ\": \"W\",\r\n\t\"ẃ\": \"w\",\r\n\t\"X̆\": \"X\",\r\n\t\"x̆\": \"x\",\r\n\t\"Ŷ\": \"Y\",\r\n\t\"ŷ\": \"y\",\r\n\t\"Ÿ\": \"Y\",\r\n\t\"Y̆\": \"Y\",\r\n\t\"y̆\": \"y\",\r\n\t\"Ź\": \"Z\",\r\n\t\"ź\": \"z\",\r\n\t\"Ż\": \"Z\",\r\n\t\"ż\": \"z\",\r\n\t\"Ž\": \"Z\",\r\n\t\"ž\": \"z\",\r\n\t\"ſ\": \"s\",\r\n\t\"ƒ\": \"f\",\r\n\t\"Ơ\": \"O\",\r\n\t\"ơ\": \"o\",\r\n\t\"Ư\": \"U\",\r\n\t\"ư\": \"u\",\r\n\t\"Ǎ\": \"A\",\r\n\t\"ǎ\": \"a\",\r\n\t\"Ǐ\": \"I\",\r\n\t\"ǐ\": \"i\",\r\n\t\"Ǒ\": \"O\",\r\n\t\"ǒ\": \"o\",\r\n\t\"Ǔ\": \"U\",\r\n\t\"ǔ\": \"u\",\r\n\t\"Ǖ\": \"U\",\r\n\t\"ǖ\": \"u\",\r\n\t\"Ǘ\": \"U\",\r\n\t\"ǘ\": \"u\",\r\n\t\"Ǚ\": \"U\",\r\n\t\"ǚ\": \"u\",\r\n\t\"Ǜ\": \"U\",\r\n\t\"ǜ\": \"u\",\r\n\t\"Ứ\": \"U\",\r\n\t\"ứ\": \"u\",\r\n\t\"Ṹ\": \"U\",\r\n\t\"ṹ\": \"u\",\r\n\t\"Ǻ\": \"A\",\r\n\t\"ǻ\": \"a\",\r\n\t\"Ǽ\": \"AE\",\r\n\t\"ǽ\": \"ae\",\r\n\t\"Ǿ\": \"O\",\r\n\t\"ǿ\": \"o\",\r\n\t\"Þ\": \"TH\",\r\n\t\"þ\": \"th\",\r\n\t\"Ṕ\": \"P\",\r\n\t\"ṕ\": \"p\",\r\n\t\"Ṥ\": \"S\",\r\n\t\"ṥ\": \"s\",\r\n\t\"X́\": \"X\",\r\n\t\"x́\": \"x\",\r\n\t\"Ѓ\": \"Г\",\r\n\t\"ѓ\": \"г\",\r\n\t\"Ќ\": \"К\",\r\n\t\"ќ\": \"к\",\r\n\t\"A̋\": \"A\",\r\n\t\"a̋\": \"a\",\r\n\t\"E̋\": \"E\",\r\n\t\"e̋\": \"e\",\r\n\t\"I̋\": \"I\",\r\n\t\"i̋\": \"i\",\r\n\t\"Ǹ\": \"N\",\r\n\t\"ǹ\": \"n\",\r\n\t\"Ồ\": \"O\",\r\n\t\"ồ\": \"o\",\r\n\t\"Ṑ\": \"O\",\r\n\t\"ṑ\": \"o\",\r\n\t\"Ừ\": \"U\",\r\n\t\"ừ\": \"u\",\r\n\t\"Ẁ\": \"W\",\r\n\t\"ẁ\": \"w\",\r\n\t\"Ỳ\": \"Y\",\r\n\t\"ỳ\": \"y\",\r\n\t\"Ȁ\": \"A\",\r\n\t\"ȁ\": \"a\",\r\n\t\"Ȅ\": \"E\",\r\n\t\"ȅ\": \"e\",\r\n\t\"Ȉ\": \"I\",\r\n\t\"ȉ\": \"i\",\r\n\t\"Ȍ\": \"O\",\r\n\t\"ȍ\": \"o\",\r\n\t\"Ȑ\": \"R\",\r\n\t\"ȑ\": \"r\",\r\n\t\"Ȕ\": \"U\",\r\n\t\"ȕ\": \"u\",\r\n\t\"B̌\": \"B\",\r\n\t\"b̌\": \"b\",\r\n\t\"Č̣\": \"C\",\r\n\t\"č̣\": \"c\",\r\n\t\"Ê̌\": \"E\",\r\n\t\"ê̌\": \"e\",\r\n\t\"F̌\": \"F\",\r\n\t\"f̌\": \"f\",\r\n\t\"Ǧ\": \"G\",\r\n\t\"ǧ\": \"g\",\r\n\t\"Ȟ\": \"H\",\r\n\t\"ȟ\": \"h\",\r\n\t\"J̌\": \"J\",\r\n\t\"ǰ\": \"j\",\r\n\t\"Ǩ\": \"K\",\r\n\t\"ǩ\": \"k\",\r\n\t\"M̌\": \"M\",\r\n\t\"m̌\": \"m\",\r\n\t\"P̌\": \"P\",\r\n\t\"p̌\": \"p\",\r\n\t\"Q̌\": \"Q\",\r\n\t\"q̌\": \"q\",\r\n\t\"Ř̩\": \"R\",\r\n\t\"ř̩\": \"r\",\r\n\t\"Ṧ\": \"S\",\r\n\t\"ṧ\": \"s\",\r\n\t\"V̌\": \"V\",\r\n\t\"v̌\": \"v\",\r\n\t\"W̌\": \"W\",\r\n\t\"w̌\": \"w\",\r\n\t\"X̌\": \"X\",\r\n\t\"x̌\": \"x\",\r\n\t\"Y̌\": \"Y\",\r\n\t\"y̌\": \"y\",\r\n\t\"A̧\": \"A\",\r\n\t\"a̧\": \"a\",\r\n\t\"B̧\": \"B\",\r\n\t\"b̧\": \"b\",\r\n\t\"Ḑ\": \"D\",\r\n\t\"ḑ\": \"d\",\r\n\t\"Ȩ\": \"E\",\r\n\t\"ȩ\": \"e\",\r\n\t\"Ɛ̧\": \"E\",\r\n\t\"ɛ̧\": \"e\",\r\n\t\"Ḩ\": \"H\",\r\n\t\"ḩ\": \"h\",\r\n\t\"I̧\": \"I\",\r\n\t\"i̧\": \"i\",\r\n\t\"Ɨ̧\": \"I\",\r\n\t\"ɨ̧\": \"i\",\r\n\t\"M̧\": \"M\",\r\n\t\"m̧\": \"m\",\r\n\t\"O̧\": \"O\",\r\n\t\"o̧\": \"o\",\r\n\t\"Q̧\": \"Q\",\r\n\t\"q̧\": \"q\",\r\n\t\"U̧\": \"U\",\r\n\t\"u̧\": \"u\",\r\n\t\"X̧\": \"X\",\r\n\t\"x̧\": \"x\",\r\n\t\"Z̧\": \"Z\",\r\n\t\"z̧\": \"z\",\r\n};\r\n\r\nvar chars = Object.keys(characterMap).join('|');\r\nvar allAccents = new RegExp(chars, 'g');\r\nvar firstAccent = new RegExp(chars, '');\r\n\r\nvar removeAccents = function(string) {\t\r\n\treturn string.replace(allAccents, function(match) {\r\n\t\treturn characterMap[match];\r\n\t});\r\n};\r\n\r\nvar hasAccents = function(string) {\r\n\treturn !!string.match(firstAccent);\r\n};\r\n\r\nmodule.exports = removeAccents;\r\nmodule.exports.has = hasAccents;\r\nmodule.exports.remove = removeAccents;\r\n","/**\n * @name match-sorter\n * @license MIT license.\n * @copyright (c) 2019 Kent C. Dodds\n * @author Kent C. Dodds <kent@doddsfamily.us>\n */\nimport removeAccents from 'remove-accents'\n\nconst rankings = {\n  CASE_SENSITIVE_EQUAL: 9,\n  EQUAL: 8,\n  STARTS_WITH: 7,\n  WORD_STARTS_WITH: 6,\n  STRING_CASE: 5,\n  STRING_CASE_ACRONYM: 4,\n  CONTAINS: 3,\n  ACRONYM: 2,\n  MATCHES: 1,\n  NO_MATCH: 0,\n}\n\nconst caseRankings = {\n  CAMEL: 0.8,\n  PASCAL: 0.6,\n  KEBAB: 0.4,\n  SNAKE: 0.2,\n  NO_CASE: 0,\n}\n\nmatchSorter.rankings = rankings\nmatchSorter.caseRankings = caseRankings\n\nconst defaultBaseSortFn = (a, b) =>\n  String(a.rankedItem).localeCompare(b.rankedItem)\n\n/**\n * Takes an array of items and a value and returns a new array with the items that match the given value\n * @param {Array} items - the items to sort\n * @param {String} value - the value to use for ranking\n * @param {Object} options - Some options to configure the sorter\n * @return {Array} - the new sorted array\n */\nfunction matchSorter(items, value, options = {}) {\n  const {\n    keys,\n    threshold = rankings.MATCHES,\n    baseSort = defaultBaseSortFn,\n  } = options\n  const matchedItems = items.reduce(reduceItemsToRanked, [])\n  return matchedItems\n    .sort((a, b) => sortRankedItems(a, b, baseSort))\n    .map(({item}) => item)\n\n  function reduceItemsToRanked(matches, item, index) {\n    const {\n      rankedItem,\n      rank,\n      keyIndex,\n      keyThreshold = threshold,\n    } = getHighestRanking(item, keys, value, options)\n    if (rank >= keyThreshold) {\n      matches.push({rankedItem, item, rank, index, keyIndex})\n    }\n    return matches\n  }\n}\n\n/**\n * Gets the highest ranking for value for the given item based on its values for the given keys\n * @param {*} item - the item to rank\n * @param {Array} keys - the keys to get values from the item for the ranking\n * @param {String} value - the value to rank against\n * @param {Object} options - options to control the ranking\n * @return {{rank: Number, keyIndex: Number, keyThreshold: Number}} - the highest ranking\n */\nfunction getHighestRanking(item, keys, value, options) {\n  if (!keys) {\n    return {\n      // ends up being duplicate of 'item' in matches but consistent\n      rankedItem: item,\n      rank: getMatchRanking(item, value, options),\n      keyIndex: -1,\n      keyThreshold: options.threshold,\n    }\n  }\n  const valuesToRank = getAllValuesToRank(item, keys)\n  return valuesToRank.reduce(\n    (\n      {rank, rankedItem, keyIndex, keyThreshold},\n      {itemValue, attributes},\n      i,\n    ) => {\n      let newRank = getMatchRanking(itemValue, value, options)\n      let newRankedItem = rankedItem\n      const {minRanking, maxRanking, threshold} = attributes\n      if (newRank < minRanking && newRank >= rankings.MATCHES) {\n        newRank = minRanking\n      } else if (newRank > maxRanking) {\n        newRank = maxRanking\n      }\n      if (newRank > rank) {\n        rank = newRank\n        keyIndex = i\n        keyThreshold = threshold\n        newRankedItem = itemValue\n      }\n      return {rankedItem: newRankedItem, rank, keyIndex, keyThreshold}\n    },\n    {rank: rankings.NO_MATCH, keyIndex: -1, keyThreshold: options.threshold},\n  )\n}\n\n/**\n * Gives a rankings score based on how well the two strings match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Object} options - options for the match (like keepDiacritics for comparison)\n * @returns {Number} the ranking for how well stringToRank matches testString\n */\nfunction getMatchRanking(testString, stringToRank, options) {\n  /* eslint complexity:[2, 12] */\n  testString = prepareValueForComparison(testString, options)\n  stringToRank = prepareValueForComparison(stringToRank, options)\n\n  // too long\n  if (stringToRank.length > testString.length) {\n    return rankings.NO_MATCH\n  }\n\n  // case sensitive equals\n  if (testString === stringToRank) {\n    return rankings.CASE_SENSITIVE_EQUAL\n  }\n\n  const caseRank = getCaseRanking(testString)\n  const isPartial = isPartialOfCase(testString, stringToRank, caseRank)\n  const isCasedAcronym = isCaseAcronym(testString, stringToRank, caseRank)\n\n  // Lower casing before further comparison\n  testString = testString.toLowerCase()\n  stringToRank = stringToRank.toLowerCase()\n\n  // case insensitive equals\n  if (testString === stringToRank) {\n    return rankings.EQUAL + caseRank\n  }\n\n  // starts with\n  if (testString.indexOf(stringToRank) === 0) {\n    return rankings.STARTS_WITH + caseRank\n  }\n\n  // word starts with\n  if (testString.indexOf(` ${stringToRank}`) !== -1) {\n    return rankings.WORD_STARTS_WITH + caseRank\n  }\n\n  // is a part inside a cased string\n  if (isPartial) {\n    return rankings.STRING_CASE + caseRank\n  }\n\n  // is acronym for a cased string\n  if (caseRank > 0 && isCasedAcronym) {\n    return rankings.STRING_CASE_ACRONYM + caseRank\n  }\n\n  // contains\n  if (testString.indexOf(stringToRank) !== -1) {\n    return rankings.CONTAINS + caseRank\n  } else if (stringToRank.length === 1) {\n    // If the only character in the given stringToRank\n    //   isn't even contained in the testString, then\n    //   it's definitely not a match.\n    return rankings.NO_MATCH\n  }\n\n  // acronym\n  if (getAcronym(testString).indexOf(stringToRank) !== -1) {\n    return rankings.ACRONYM + caseRank\n  }\n\n  // will return a number between rankings.MATCHES and\n  // rankings.MATCHES + 1 depending  on how close of a match it is.\n  return getClosenessRanking(testString, stringToRank)\n}\n\n/**\n * Generates an acronym for a string.\n *\n * @param {String} string the string for which to produce the acronym\n * @returns {String} the acronym\n */\nfunction getAcronym(string) {\n  let acronym = ''\n  const wordsInString = string.split(' ')\n  wordsInString.forEach(wordInString => {\n    const splitByHyphenWords = wordInString.split('-')\n    splitByHyphenWords.forEach(splitByHyphenWord => {\n      acronym += splitByHyphenWord.substr(0, 1)\n    })\n  })\n  return acronym\n}\n\n/**\n * Returns a score base on the case of the testString\n * @param {String} testString - the string to test against\n * @returns {Number} the number of the ranking,\n * based on the case between 0 and 1 for how the testString matches the case\n */\nfunction getCaseRanking(testString) {\n  const containsUpperCase = testString.toLowerCase() !== testString\n  const containsDash = testString.indexOf('-') >= 0\n  const containsUnderscore = testString.indexOf('_') >= 0\n\n  if (!containsUpperCase && !containsUnderscore && containsDash) {\n    return caseRankings.KEBAB\n  }\n\n  if (!containsUpperCase && containsUnderscore && !containsDash) {\n    return caseRankings.SNAKE\n  }\n\n  if (containsUpperCase && !containsDash && !containsUnderscore) {\n    const startsWithUpperCase = testString[0].toUpperCase() === testString[0]\n    if (startsWithUpperCase) {\n      return caseRankings.PASCAL\n    }\n\n    return caseRankings.CAMEL\n  }\n\n  return caseRankings.NO_CASE\n}\n\n/**\n * Returns whether the stringToRank is one of the case parts in the testString (works with any string case)\n * @example\n * // returns true\n * isPartialOfCase('helloWorld', 'world', caseRankings.CAMEL)\n * @example\n * // returns false\n * isPartialOfCase('helloWorld', 'oworl', caseRankings.CAMEL)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @param {Number} caseRanking - the ranking score based on case of testString\n * @returns {Boolean} whether the stringToRank is one of the case parts in the testString\n */\nfunction isPartialOfCase(testString, stringToRank, caseRanking) {\n  const testIndex = testString.toLowerCase().indexOf(stringToRank.toLowerCase())\n\n  switch (caseRanking) {\n    case caseRankings.SNAKE:\n      return testString[testIndex - 1] === '_'\n    case caseRankings.KEBAB:\n      return testString[testIndex - 1] === '-'\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      return (\n        testIndex !== -1 &&\n        testString[testIndex] === testString[testIndex].toUpperCase()\n      )\n    default:\n      return false\n  }\n}\n\n/**\n * Check if stringToRank is an acronym for a partial case\n * @example\n * // returns true\n * isCaseAcronym('super_duper_file', 'sdf', caseRankings.SNAKE)\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the acronym to test\n * @param {Number} caseRank - the ranking of the case\n * @returns {Boolean} whether the stringToRank is an acronym for the testString\n */\nfunction isCaseAcronym(testString, stringToRank, caseRank) {\n  let splitValue = null\n  switch (caseRank) {\n    case caseRankings.SNAKE:\n      splitValue = '_'\n      break\n    case caseRankings.KEBAB:\n      splitValue = '-'\n      break\n    case caseRankings.PASCAL:\n    case caseRankings.CAMEL:\n      splitValue = /(?=[A-Z])/\n      break\n    default:\n      splitValue = null\n  }\n\n  const splitTestString = testString.split(splitValue)\n  return stringToRank\n    .toLowerCase()\n    .split('')\n    .reduce((correct, char, charIndex) => {\n      const splitItem = splitTestString[charIndex]\n      return correct && splitItem && splitItem[0].toLowerCase() === char\n    }, true)\n}\n\n/**\n * Returns a score based on how spread apart the\n * characters from the stringToRank are within the testString.\n * A number close to rankings.MATCHES represents a loose match. A number close\n * to rankings.MATCHES + 1 represents a tighter match.\n * @param {String} testString - the string to test against\n * @param {String} stringToRank - the string to rank\n * @returns {Number} the number between rankings.MATCHES and\n * rankings.MATCHES + 1 for how well stringToRank matches testString\n */\nfunction getClosenessRanking(testString, stringToRank) {\n  let matchingInOrderCharCount = 0\n  let charNumber = 0\n  function findMatchingCharacter(matchChar, string, index) {\n    for (let j = index; j < string.length; j++) {\n      const stringChar = string[j]\n      if (stringChar === matchChar) {\n        matchingInOrderCharCount += 1\n        return j + 1\n      }\n    }\n    return -1\n  }\n  function getRanking(spread) {\n    const spreadPercentage = 1 / spread\n    const inOrderPercentage = matchingInOrderCharCount / stringToRank.length\n    const ranking = rankings.MATCHES + inOrderPercentage * spreadPercentage\n    return ranking\n  }\n  const firstIndex = findMatchingCharacter(stringToRank[0], testString, 0)\n  if (firstIndex < 0) {\n    return rankings.NO_MATCH\n  }\n  charNumber = firstIndex\n  for (let i = 1; i < stringToRank.length; i++) {\n    const matchChar = stringToRank[i]\n    charNumber = findMatchingCharacter(matchChar, testString, charNumber)\n    const found = charNumber > -1\n    if (!found) {\n      return rankings.NO_MATCH\n    }\n  }\n\n  const spread = charNumber - firstIndex\n  return getRanking(spread)\n}\n\n/**\n * Sorts items that have a rank, index, and keyIndex\n * @param {Object} a - the first item to sort\n * @param {Object} b - the second item to sort\n * @return {Number} -1 if a should come first, 1 if b should come first, 0 if equal\n */\nfunction sortRankedItems(a, b, baseSort) {\n  const aFirst = -1\n  const bFirst = 1\n  const {rank: aRank, keyIndex: aKeyIndex} = a\n  const {rank: bRank, keyIndex: bKeyIndex} = b\n  const same = aRank === bRank\n  if (same) {\n    if (aKeyIndex === bKeyIndex) {\n      // use the base sort function as a tie-breaker\n      return baseSort(a, b)\n    } else {\n      return aKeyIndex < bKeyIndex ? aFirst : bFirst\n    }\n  } else {\n    return aRank > bRank ? aFirst : bFirst\n  }\n}\n\n/**\n * Prepares value for comparison by stringifying it, removing diacritics (if specified)\n * @param {String} value - the value to clean\n * @param {Object} options - {keepDiacritics: whether to remove diacritics}\n * @return {String} the prepared value\n */\nfunction prepareValueForComparison(value, {keepDiacritics}) {\n  value = `${value}` // toString\n  if (!keepDiacritics) {\n    value = removeAccents(value)\n  }\n  return value\n}\n\n/**\n * Gets value for key in item at arbitrarily nested keypath\n * @param {Object} item - the item\n * @param {Object|Function} key - the potentially nested keypath or property callback\n * @return {Array} - an array containing the value(s) at the nested keypath\n */\nfunction getItemValues(item, key) {\n  if (typeof key === 'object') {\n    key = key.key\n  }\n  let value\n  if (typeof key === 'function') {\n    value = key(item)\n    // eslint-disable-next-line no-negated-condition\n  } else if (key.indexOf('.') !== -1) {\n    // handle nested keys\n    value = key\n      .split('.')\n      .reduce(\n        (itemObj, nestedKey) => (itemObj ? itemObj[nestedKey] : null),\n        item,\n      )\n  } else {\n    value = item[key]\n  }\n  // concat because `value` can be a string or an array\n  // eslint-disable-next-line\n  return value != null ? [].concat(value) : null\n}\n\n/**\n * Gets all the values for the given keys in the given item and returns an array of those values\n * @param {Object} item - the item from which the values will be retrieved\n * @param {Array} keys - the keys to use to retrieve the values\n * @return {Array} objects with {itemValue, attributes}\n */\nfunction getAllValuesToRank(item, keys) {\n  return keys.reduce((allVals, key) => {\n    const values = getItemValues(item, key)\n    if (values) {\n      values.forEach(itemValue => {\n        allVals.push({\n          itemValue,\n          attributes: getKeyAttributes(key),\n        })\n      })\n    }\n    return allVals\n  }, [])\n}\n\n/**\n * Gets all the attributes for the given key\n * @param {Object|String} key - the key from which the attributes will be retrieved\n * @return {Object} object containing the key's attributes\n */\nfunction getKeyAttributes(key) {\n  if (typeof key === 'string') {\n    key = {key}\n  }\n  return {\n    maxRanking: Infinity,\n    minRanking: -Infinity,\n    ...key,\n  }\n}\n\nexport default matchSorter\nexport {rankings}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","characterMap","chars","keys","join","allAccents","RegExp","firstAccent","removeAccents","string","replace","match","rankings","CASE_SENSITIVE_EQUAL","EQUAL","STARTS_WITH","WORD_STARTS_WITH","STRING_CASE","STRING_CASE_ACRONYM","CONTAINS","ACRONYM","MATCHES","NO_MATCH","caseRankings","CAMEL","PASCAL","KEBAB","SNAKE","NO_CASE","matchSorter","defaultBaseSortFn","a","b","String","rankedItem","localeCompare","items","value","options","threshold","baseSort","reduce","matches","item","index","rank","getMatchRanking","keyIndex","keyThreshold","allVals","values","indexOf","split","itemObj","nestedKey","concat","getItemValues","forEach","itemValue","push","attributes","getKeyAttributes","getAllValuesToRank","newRank","newRankedItem","minRanking","maxRanking","getHighestRanking","sort","aFirst","bFirst","aRank","aKeyIndex","bRank","bKeyIndex","sortRankedItems","map","testString","stringToRank","prepareValueForComparison","acronym","caseRank","containsUpperCase","toLowerCase","containsDash","containsUnderscore","toUpperCase","getCaseRanking","isPartial","caseRanking","testIndex","isPartialOfCase","isCasedAcronym","splitValue","splitTestString","correct","char","charIndex","splitItem","isCaseAcronym","wordInString","splitByHyphenWord","substr","matchingInOrderCharCount","charNumber","findMatchingCharacter","matchChar","j","getRanking","spread","inOrderPercentage","firstIndex","getClosenessRanking","keepDiacritics","Infinity"],"mappings":"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"}